input {
    beats {
        port => "5044"
    }
}

filter {
   if [fields][docker_type] == "nginx" {
      if [fields][log_type] == "access" {
         grok {
           match => { "message" => ["%{IPORHOST:[nginx][access][remote_ip]} - %{DATA:[nginx][access][user_name]} \[%{HTTPDATE:[nginx][access][time]}\] \"%{WORD:[nginx][access][method]} %{DATA:[nginx][access][url]} HTTP/%{NUMBER:[nginx][access][http_version]}\" %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]:float} (?:%{NUMBER:[nginx][access][upstream_connect_time]:float}|-) (?:%{NUMBER:[nginx][access][upstream_header_time]:float}|-) (?:%{NUMBER:[nginx][access][upstream_response_time]:float}|-) (?:%{NUMBER:[nginx][access][request_time]:float}|-) \"%{DATA:[nginx][access][referrer]}\" \"%{DATA:[nginx][access][agent]}\""] }
           remove_field => "message"
         }

         urldecode {
           field => "[nginx][access][url]"
         }

         mutate {
           add_field => { "read_timestamp" => "%{@timestamp}" }
         }
         mutate {
           add_field => { "[nginx][log_type]" => "access" }
         }
         mutate {
           gsub => [ "[nginx][access][url]", "\/link\/[a-zA-Z0-9.+=_-]+\/", "/link/**************/"]
         }
         date {
           match => [ "[nginx][access][time]", "dd/MMM/YYYY:H:m:s Z" ]
           remove_field => "[nginx][access][time]"
         }
         useragent {
           source => "[nginx][access][agent]"
           target => "[nginx][access][user_agent]"
           remove_field => "[nginx][access][agent]"
         }
         if [beat][name] == "kheops_reverse_proxy" {
           geoip {
             source => "[nginx][access][remote_ip]"
#             target => "[nginx][access][geoip]"
           }
         }

         if [beat][name] == "kheops_pep" {

           mutate { add_field => { "api" => true }}

           mutate {
             copy => { "[nginx][access][url]" => "splited_url" }
           }

           mutate {
             split => ["splited_url", "?"]
           }

           mutate {
             copy => { "[splited_url][0]" => "url_tmp" }
           }

           mutate { 
             copy => { "[splited_url][0]" => "generic_url" }
             copy => { "[splited_url][1]" => "query_param_tmp" }
             copy => { "query_param_tmp" => "all_query_param" }
           }

           mutate {
             split => ["all_query_param", "&"]
           }

           kv {
             source => "query_param_tmp"
             target => "query_param"
             field_split => "&"
             remove_field => "query_param_tmp"
           }

           mutate { 
             split => ["url_tmp", "/"] 
           }

           mutate {
             copy => { "[url_tmp][2]" => "[path_param][study]" }
             copy => { "[url_tmp][4]" => "[path_param][series]" }
             copy => { "[url_tmp][6]" => "[path_param][instance]" }
             copy => { "[url_tmp][8]" => "[path_param][fram]" }
             remove_field => "url_tmp"
           }

           mutate {
             gsub => ["generic_url", "([0-9]+[.])*[0-9]+", "***"]
           }

         } else if [beat][name] == "kheops_reverse_proxy" {

           mutate {
             copy => { "[nginx][access][url]" => "splited_url" }
           }

           mutate {
             split => ["splited_url", "?"]
           }

           mutate {
             copy => { "[splited_url][0]" => "url_tmp" }
           }

           mutate {
             copy => { "[splited_url][0]" => "generic_url" }
             copy => { "[splited_url][1]" => "query_param_tmp" }
             copy => { "query_param_tmp" => "all_query_param" }
           }

           mutate {
             gsub => ["generic_url", "\/studies\/([0-9]+[.])*[0-9]+", "/studies/***"]
             gsub => ["generic_url", "\/series\/([0-9]+[.])*[0-9]+", "/series/***"]
             gsub => ["generic_url", "\/albums\/[0-9a-zA-Z]{10}", "/albums/***"]
             gsub => ["generic_url", "\/capabilities\/[0-9a-zA-Z]{10}", "/capabilities/***"]
             gsub => ["generic_url", "\/reportproviders\/[0-9a-zA-Z]{22}", "/reportproviders/***"]
             gsub => ["generic_url", "\/users\/[0-9a-zA-Z@_.-]+", "/users/***"]
           }

           mutate {
             split => ["url_tmp", "/"]
           }

           if [url_tmp][1] == "api" {
              mutate { add_field => { "api" => true }}
           } else {
              mutate { add_field => { "api" => false }}
           }

           if [url_tmp][2] == "albums" {
             mutate { copy => { "[url_tmp][3]" => "[path_param][album_id]" } }        
           } else if [url_tmp][4] == "albums" {
       	     mutate { copy => { "[url_tmp][5]" => "[path_param][album_id]" } }
           } else if [url_tmp][6] == "albums" {
             mutate { copy => { "[url_tmp][5]" => "[path_param][album_id]" } }
           }


           mutate { remove_field => "url_tmp" }

           kv {
             source => "query_param_tmp"
             target => "query_param"
             field_split => "&"
             remove_field => "query_param_tmp"
           }

         } #end if kheops_reverse_proxy

      }

      if [fields][log_type] == "error" {
         grok {
           match => { "message" => ["%{DATA:[time]} \[%{DATA:[nginx][error][level]}\] %{NUMBER:[nginx][error][pid]}#%{NUMBER:[nginx][error][tid]}: (\*%{NUMBER:[nginx][error][connection_id]} )?%{GREEDYDATA:[nginx][error][message]}"] } 
         }
         mutate {
           add_field => { "read_timestamp" => "%{@timestamp}" }
         }
         mutate {
           add_field => { "[nginx][log_type]" => "error" }
         }
         date {
           match => [ "[time]", "yyyy/MM/dd HH:mm:ss" ]
           timezone => "Europe/Zurich"
           remove_field => "time"
         }
      }
   } 

   if "beats_input_codec_plain_applied" in [tags] {
     mutate {
       remove_tag => ["beats_input_codec_plain_applied"]
     }
   }
}

output {
     elasticsearch {
       hosts => [ "elasticsearch:9200" ]
       index => "kheopsnginx-%{+YYYY.MM.dd}"
    }
}
